{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookListService {\n  constructor(http) {\n    this.http = http;\n    this.bookListUrl = 'http://localhost:8080/api/favoritebooks/';\n  }\n  getBooks() {\n    return this.http.get(this.bookListUrl).pipe(tap(data => console.log('All', JSON.stringify(data))), catchError(this.handleError));\n  }\n  addBook(book) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(this.bookListUrl + 'saveBook', book, {\n      headers\n    }).pipe(tap(data => console.log('added book: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  deleteBook(id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.bookListUrl}delete/${id}`;\n    return this.http.delete(url, {\n      headers\n    }).pipe(tap(data => console.log('deleted book: ' + id)), catchError(this.handleError));\n  }\n  handleError(err) {\n    let errorMessage = ' ';\n    if (err.error instanceof ErrorEvent) {\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(() => errorMessage);\n  }\n}\nBookListService.ɵfac = function BookListService_Factory(t) {\n  return new (t || BookListService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookListService,\n  factory: BookListService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAwCA,WAAW,QAAQ,sBAAsB;AACjF,SAASC,UAAU,EAAoBC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;AAKpE,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,gBAAW,GAAG,0CAA0C;EAExB;EAExCC,QAAQ;IACJ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAS,IAAI,CAACC,WAAW,CAAC,CAACC,IAAI,CACjDR,GAAG,CAACS,IAAI,IAAIC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAAC,EACrDV,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAC7B;EACL;EAEAC,OAAO,CAACC,IAAU;IACd,MAAMC,OAAO,GAAG,IAAInB,WAAW,CAAC;MAAC,cAAc,EAAE;IAAkB,CAAC,CAAC;IACrE,OAAO,IAAI,CAACM,IAAI,CAACc,IAAI,CAAO,IAAI,CAACX,WAAW,GAAG,UAAU,EAAES,IAAI,EAAE;MAACC;IAAO,CAAC,CAAC,CAC1ET,IAAI,CACDR,GAAG,CAACS,IAAI,IAAIC,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAAC,EAC/DV,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAC/B;EACL;EAIAK,UAAU,CAACC,EAAU;IACf,MAAMH,OAAO,GAAG,IAAInB,WAAW,CAAC;MAAC,cAAc,EAAE;IAAkB,CAAC,CAAC;IACrE,MAAMuB,GAAG,GAAG,GAAG,IAAI,CAACd,WAAW,UAAUa,EAAE,EAAE;IAC7C,OAAO,IAAI,CAAChB,IAAI,CAACkB,MAAM,CAAOD,GAAG,EAAE;MAACJ;IAAO,CAAC,CAAC,CAC5CT,IAAI,CACDR,GAAG,CAACS,IAAI,IAAIC,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAGS,EAAE,CAAC,CAAC,EAC/CrB,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAC/B;EACL;EAEMA,WAAW,CAACS,GAAsB;IACpC,IAAIC,YAAY,GAAG,GAAG;IACtB,IAAGD,GAAG,CAACE,KAAK,YAAYC,UAAU,EAAC;MAC/BF,YAAY,GAAG,sBAAsBD,GAAG,CAACE,KAAK,CAACE,OAAO,EAAE;KAC3D,MAAI;MACDH,YAAY,GAAG,yBAAyBD,GAAG,CAACK,MAAM,uBAAuBL,GAAG,CAACI,OAAO,EAAE;;IAE1FjB,OAAO,CAACC,GAAG,CAACa,YAAY,CAAC;IACzB,OAAOvB,UAAU,CAAC,MAAMuB,YAAY,CAAC;EACzC;;AA1CStB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA2B,SAAf3B,eAAe;EAAA4B,YAFd;AAAM","names":["HttpHeaders","catchError","tap","throwError","BookListService","constructor","http","getBooks","get","bookListUrl","pipe","data","console","log","JSON","stringify","handleError","addBook","book","headers","post","deleteBook","id","url","delete","err","errorMessage","error","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\matthew.earlywine\\git\\book-archive\\webapp-NG\\book-archive-ng\\src\\app\\book-list\\book-list.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Book } from './book';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, Observable, pipe, tap, throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BookListService {\r\n  private bookListUrl = 'http://localhost:8080/api/favoritebooks/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getBooks(): Observable<Book[]>{\r\n      return this.http.get<Book[]>(this.bookListUrl).pipe(\r\n        tap(data => console.log('All', JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  \r\n  addBook(book: Book): Observable<Book>{\r\n      const headers = new HttpHeaders({'Content-Type': 'application/json'});\r\n      return this.http.post<Book>(this.bookListUrl + 'saveBook', book, {headers})\r\n      .pipe(\r\n          tap(data => console.log('added book: ' + JSON.stringify(data))),\r\n          catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  \r\n\r\n  deleteBook(id: number): Observable<{}>{\r\n        const headers = new HttpHeaders({'Content-Type': 'application/json'});\r\n        const url = `${this.bookListUrl}delete/${id}`;\r\n        return this.http.delete<Book>(url, {headers})\r\n        .pipe(\r\n            tap(data => console.log('deleted book: ' + id)),\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n  private handleError(err: HttpErrorResponse){\r\n        let errorMessage = ' ';\r\n        if(err.error instanceof ErrorEvent){\r\n            errorMessage = `An error occurred: ${err.error.message}`;\r\n        }else{\r\n            errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}` \r\n        }\r\n        console.log(errorMessage);\r\n        return throwError(() => errorMessage);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}